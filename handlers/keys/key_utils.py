import asyncio

from typing import Any

import asyncpg

from py3xui import AsyncApi

from config import ADMIN_PASSWORD, ADMIN_USERNAME, DATABASE_URL, LIMIT_IP, PUBLIC_LINK, SUPERNODE, TOTAL_GB
from database import get_servers, store_key, delete_notification
from handlers.utils import get_least_loaded_cluster
from logger import logger
from panels.three_xui import (
    ClientConfig,
    add_client,
    delete_client,
    extend_client_key,
    get_client_traffic,
    toggle_client,
)


async def create_key_on_cluster(
    cluster_id: str, tg_id: int, client_id: str, email: str, expiry_timestamp: int, plan: int = None
):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ, –µ—Å–ª–∏ cluster_id ‚Äî —ç—Ç–æ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞).
    """
    try:
        servers = await get_servers()
        cluster = servers.get(cluster_id)

        if not cluster:
            found_servers = []
            for _key, server_list in servers.items():
                for server_info in server_list:
                    if server_info.get("server_name", "").lower() == cluster_id.lower():
                        found_servers.append(server_info)
            if found_servers:
                cluster = found_servers
            else:
                raise ValueError(f"–ö–ª–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å ID/–∏–º–µ–Ω–µ–º {cluster_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        semaphore = asyncio.Semaphore(2)

        if SUPERNODE:
            for server_info in cluster:
                await create_client_on_server(
                    server_info, tg_id, client_id, email, expiry_timestamp, semaphore, plan=plan
                )
        else:
            await asyncio.gather(
                *(
                    create_client_on_server(server, tg_id, client_id, email, expiry_timestamp, semaphore, plan=plan)
                    for server in cluster
                ),
                return_exceptions=True,
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
        raise e


async def create_client_on_server(
    server_info: dict,
    tg_id: int,
    client_id: str,
    email: str,
    expiry_timestamp: int,
    semaphore: asyncio.Semaphore,
    plan: int = None,
):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Å–µ—Ä–≤–µ—Ä–µ.
    """
    async with semaphore:
        xui = AsyncApi(
            server_info["api_url"],
            username=ADMIN_USERNAME,
            password=ADMIN_PASSWORD,
            logger=logger,
        )

        inbound_id = server_info.get("inbound_id")
        server_name = server_info.get("server_name", "unknown")

        if not inbound_id:
            logger.warning(f"INBOUND_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}. –ü—Ä–æ–ø—É—Å–∫.")
            return

        if SUPERNODE:
            unique_email = f"{email}_{server_name.lower()}"
            sub_id = email
        else:
            unique_email = email
            sub_id = unique_email

        total_gb_value = int(TOTAL_GB) if plan is None else int(plan) * int(TOTAL_GB)

        await add_client(
            xui,
            ClientConfig(
                client_id=client_id,
                email=unique_email,
                tg_id=tg_id,
                limit_ip=LIMIT_IP,
                total_gb=total_gb_value,
                expiry_time=expiry_timestamp,
                enable=True,
                flow="xtls-rprx-vision",
                inbound_id=int(inbound_id),
                sub_id=sub_id,
            ),
        )

        if SUPERNODE:
            await asyncio.sleep(0.7)


async def renew_key_in_cluster(cluster_id, email, client_id, new_expiry_time, total_gb):
    try:
        servers = await get_servers()
        cluster = servers.get(cluster_id)

        if not cluster:
            found_servers = []
            for _key, server_list in servers.items():
                for server_info in server_list:
                    if server_info.get("server_name", "").lower() == cluster_id.lower():
                        found_servers.append(server_info)
            if found_servers:
                cluster = found_servers
            else:
                raise ValueError(f"–ö–ª–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å ID/–∏–º–µ–Ω–µ–º {cluster_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        async with asyncpg.create_pool(DATABASE_URL) as pool:
            async with pool.acquire() as conn:
                tg_id_query = "SELECT tg_id FROM keys WHERE client_id = $1 LIMIT 1"
                tg_id_record = await conn.fetchrow(tg_id_query, client_id)

                if not tg_id_record:
                    logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å client_id={client_id} –≤ —Ç–∞–±–ª–∏—Ü–µ keys.")
                    return False

                tg_id = tg_id_record["tg_id"]

                notification_prefixes = ["key_24h", "key_10h", "key_expired", "renew"]
                for notif in notification_prefixes:
                    notification_id = f"{email}_{notif}"
                    await delete_notification(tg_id, notification_id, session=conn)
                logger.info(f"üßπ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∫–ª—é—á–∞ {email} –æ—á–∏—â–µ–Ω—ã –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏.")
        tasks = []
        for server_info in cluster:
            xui = AsyncApi(
                server_info["api_url"],
                username=ADMIN_USERNAME,
                password=ADMIN_PASSWORD,
                logger=logger,
            )

            inbound_id = server_info.get("inbound_id")
            server_name = server_info.get("server_name", "unknown")

            if not inbound_id:
                logger.warning(f"INBOUND_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            if SUPERNODE:
                unique_email = f"{email}_{server_name.lower()}"
                sub_id = email
            else:
                unique_email = email
                sub_id = unique_email

            tasks.append(
                extend_client_key(
                    xui, int(inbound_id), unique_email, new_expiry_time, client_id, total_gb, sub_id, tg_id
                )
            )

        await asyncio.gather(*tasks, return_exceptions=True)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–¥–ª–∏—Ç—å –∫–ª—é—á {client_id} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ/–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {cluster_id}: {e}")
        raise e


async def delete_key_from_cluster(cluster_id, email, client_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ —Å —Å–µ—Ä–≤–µ—Ä–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ –∏–ª–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        servers = await get_servers()
        cluster = servers.get(cluster_id)

        if not cluster:
            found_servers = []
            for _, server_list in servers.items():
                for server_info in server_list:
                    if server_info.get("server_name", "").lower() == cluster_id.lower():
                        found_servers.append(server_info)

            if found_servers:
                cluster = found_servers
            else:
                raise ValueError(f"–ö–ª–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å ID/–∏–º–µ–Ω–µ–º {cluster_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        tasks = []
        for server_info in cluster:
            xui = AsyncApi(
                server_info["api_url"],
                username=ADMIN_USERNAME,
                password=ADMIN_PASSWORD,
                logger=logger,
            )

            inbound_id = server_info.get("inbound_id")
            if not inbound_id:
                logger.warning(
                    f"INBOUND_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_info.get('server_name', 'unknown')}. –ü—Ä–æ–ø—É—Å–∫."
                )
                continue

            tasks.append(
                delete_client(
                    xui,
                    int(inbound_id),
                    email,
                    client_id,
                )
            )

        await asyncio.gather(*tasks, return_exceptions=True)

    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á {client_id} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ/–Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {cluster_id}: {e}")
        raise e


async def update_key_on_cluster(tg_id, client_id, email, expiry_time, cluster_id):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–ª—é—á –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ –∏–º—è).
    """
    try:
        servers = await get_servers()
        cluster = servers.get(cluster_id)

        if not cluster:
            found_servers = []
            for _key, server_list in servers.items():
                for server_info in server_list:
                    if server_info.get("server_name", "").lower() == cluster_id.lower():
                        found_servers.append(server_info)
            if found_servers:
                cluster = found_servers
            else:
                raise ValueError(f"–ö–ª–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å ID/–∏–º–µ–Ω–µ–º {cluster_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        tasks = []
        for server_info in cluster:
            xui = AsyncApi(
                server_info["api_url"],
                username=ADMIN_USERNAME,
                password=ADMIN_PASSWORD,
                logger=logger,
            )

            inbound_id = server_info.get("inbound_id")
            if not inbound_id:
                logger.warning(
                    f"INBOUND_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_info.get('server_name', 'unknown')}. –ü—Ä–æ–ø—É—Å–∫."
                )
                continue

            tasks.append(
                add_client(
                    xui,
                    ClientConfig(
                        client_id=client_id,
                        email=email,
                        tg_id=tg_id,
                        limit_ip=LIMIT_IP,
                        total_gb=TOTAL_GB,
                        expiry_time=expiry_time,
                        enable=True,
                        flow="xtls-rprx-vision",
                        inbound_id=int(inbound_id),
                        sub_id=email,
                    ),
                )
            )

        await asyncio.gather(*tasks, return_exceptions=True)

        logger.info(f"–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è {client_id} –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_id} –¥–ª—è {client_id}: {e}")
        raise e


async def update_subscription(tg_id: int, email: str, session: Any, cluster_override: str = None) -> None:
    record = await session.fetchrow(
        """
        SELECT k.key, k.expiry_time, k.email, k.server_id, k.client_id
        FROM keys k
        WHERE k.tg_id = $1 AND k.email = $2
        """,
        tg_id,
        email,
    )

    if not record:
        raise ValueError(f"The key {email} does not exist in database")

    expiry_time = record["expiry_time"]
    client_id = record["client_id"]
    old_cluster_id = record["server_id"]
    public_link = f"{PUBLIC_LINK}{email}/{tg_id}"

    await delete_key_from_cluster(old_cluster_id, email, client_id)

    await session.execute(
        "DELETE FROM keys WHERE tg_id = $1 AND email = $2",
        tg_id,
        email,
    )

    new_cluster_id = cluster_override or await get_least_loaded_cluster()

    await asyncio.gather(
        update_key_on_cluster(tg_id, client_id, email, expiry_time, new_cluster_id),
        return_exceptions=True,
    )

    await store_key(
        tg_id,
        client_id,
        email,
        expiry_time,
        public_link,
        server_id=new_cluster_id,
        session=session,
    )


async def get_user_traffic(session: Any, tg_id: int, email: str) -> dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö, –≥–¥–µ —É –Ω–µ–≥–æ –µ—Å—Ç—å –∫–ª—é—á.

    Args:
        session (Any): –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
        tg_id (int): ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
        email (str): Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Returns:
        dict[str, Any]: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç—Ä–∞—Ñ–∏–∫–µ.
    """

    query = "SELECT client_id, server_id FROM keys WHERE tg_id = $1 AND email = $2"
    rows = await session.fetch(query, tg_id, email)

    if not rows:
        return {"status": "error", "message": "‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π."}

    server_ids = {row["server_id"] for row in rows}

    query_servers = """
        SELECT server_name, api_url FROM servers 
        WHERE server_name = ANY($1) OR cluster_name = ANY($1)
    """
    server_rows = await session.fetch(query_servers, list(server_ids))

    if not server_rows:
        logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è: {server_ids}")
        return {"status": "error", "message": f"‚ùå –°–µ—Ä–≤–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã: {', '.join(server_ids)}"}

    servers_map = {row["server_name"]: row["api_url"] for row in server_rows}

    user_traffic_data = {}

    async def fetch_traffic(api_url: str, client_id: str, server: str) -> tuple[str, Any]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ —Å —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ client_id.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (server, used_gb) –∏–ª–∏ (server, –æ—à–∏–±–∫–∞).
        """
        xui = AsyncApi(api_url, username=ADMIN_USERNAME, password=ADMIN_PASSWORD, logger=logger)
        try:
            traffic_info = await get_client_traffic(xui, client_id)
            if traffic_info["status"] == "success" and traffic_info["traffic"]:
                client_data = traffic_info["traffic"][0]
                used_gb = (client_data.up + client_data.down) / 1073741824
                return server, round(used_gb, 2)
            else:
                return server, "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞—Ñ–∏–∫–∞"
        except Exception as e:
            return server, f"–û—à–∏–±–∫–∞: {e}"

    tasks = []
    for row in rows:
        client_id = row["client_id"]
        server_id = row["server_id"]
        if server_id in servers_map:
            api_url = servers_map[server_id]
            tasks.append(fetch_traffic(api_url, client_id, server_id))
        else:
            for server, api_url in servers_map.items():
                tasks.append(fetch_traffic(api_url, client_id, server))

    results = await asyncio.gather(*tasks, return_exceptions=True)
    for server, result in results:
        user_traffic_data[server] = result

    return {"status": "success", "traffic": user_traffic_data}


async def toggle_client_on_cluster(cluster_id: str, email: str, client_id: str, enable: bool = True) -> dict[str, Any]:
    """
    –í–∫–ª—é—á–∞–µ—Ç –∏–ª–∏ –æ—Ç–∫–ª—é—á–∞–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞.

    Args:
        cluster_id (str): ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        email (str): Email –∫–ª–∏–µ–Ω—Ç–∞
        client_id (str): UUID –∫–ª–∏–µ–Ω—Ç–∞
        enable (bool): True –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è, False –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è

    Returns:
        dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –ø–æ –∫–∞–∂–¥–æ–º—É —Å–µ—Ä–≤–µ—Ä—É
    """
    try:
        servers = await get_servers()
        cluster = servers.get(cluster_id)

        if not cluster:
            found_servers = []
            for _, server_list in servers.items():
                for server_info in server_list:
                    if server_info.get("server_name", "").lower() == cluster_id.lower():
                        found_servers.append(server_info)

            if found_servers:
                cluster = found_servers
            else:
                raise ValueError(f"–ö–ª–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å ID/–∏–º–µ–Ω–µ–º {cluster_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        results = {}
        tasks = []

        for server_info in cluster:
            xui = AsyncApi(
                server_info["api_url"],
                username=ADMIN_USERNAME,
                password=ADMIN_PASSWORD,
                logger=logger,
            )

            inbound_id = server_info.get("inbound_id")
            server_name = server_info.get("server_name", "unknown")

            if not inbound_id:
                logger.warning(f"INBOUND_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}. –ü—Ä–æ–ø—É—Å–∫.")
                results[server_name] = False
                continue

            if SUPERNODE:
                unique_email = f"{email}_{server_name.lower()}"
            else:
                unique_email = email

            tasks.append(toggle_client(xui, int(inbound_id), unique_email, client_id, enable))

        task_results = await asyncio.gather(*tasks, return_exceptions=True)

        for server_info, result in zip(cluster, task_results, strict=False):
            server_name = server_info.get("server_name", "unknown")
            if isinstance(result, Exception):
                logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {server_name}: {result}")
                results[server_name] = False
            else:
                results[server_name] = result

        status = "–≤–∫–ª—é—á–µ–Ω" if enable else "–æ—Ç–∫–ª—é—á–µ–Ω"
        logger.info(f"–ö–ª–∏–µ–Ω—Ç {email} {status} –Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_id}")

        return {"status": "success" if any(results.values()) else "error", "results": results}

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞ {email} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}: {e}")
        return {"status": "error", "error": str(e)}


async def reset_traffic_in_cluster(cluster_id: str, email: str) -> None:
    """
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç—Ä–∞—Ñ–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ (–∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞).

    Args:
        cluster_id (str): ID –∫–ª–∞—Å—Ç–µ—Ä–∞ –∏–ª–∏ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞
        email (str): Email –∫–ª–∏–µ–Ω—Ç–∞ (–±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –¥–ª—è SUPERNODE)
    """
    try:
        servers = await get_servers()
        cluster = servers.get(cluster_id)

        if not cluster:
            found_servers = []
            for _, server_list in servers.items():
                for server_info in server_list:
                    if server_info.get("server_name", "").lower() == cluster_id.lower():
                        found_servers.append(server_info)

            if found_servers:
                cluster = found_servers
            else:
                raise ValueError(f"–ö–ª–∞—Å—Ç–µ—Ä –∏–ª–∏ —Å–µ—Ä–≤–µ—Ä —Å ID/–∏–º–µ–Ω–µ–º {cluster_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

        tasks = []
        for server_info in cluster:
            api_url = server_info["api_url"]
            inbound_id = server_info.get("inbound_id")
            server_name = server_info.get("server_name", "unknown")

            if not inbound_id:
                logger.warning(f"INBOUND_ID –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}. –ü—Ä–æ–ø—É—Å–∫.")
                continue

            xui = AsyncApi(api_url, username=ADMIN_USERNAME, password=ADMIN_PASSWORD, logger=logger)

            unique_email = f"{email}_{server_name.lower()}" if SUPERNODE else email

            tasks.append(xui.client.reset_stats(int(inbound_id), unique_email))

        await asyncio.gather(*tasks, return_exceptions=True)
        logger.info(f"‚úÖ –¢—Ä–∞—Ñ–∏–∫ –∫–ª–∏–µ–Ω—Ç–∞ {email} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –Ω–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–∞—Ö –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_id}")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ç—Ä–∞—Ñ–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {email} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}: {e}")
        raise
