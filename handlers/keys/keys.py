import asyncio
import locale
import os
import time
from datetime import datetime, timedelta
from typing import Any

import asyncpg
import pytz
from aiogram import F, Router, types
from aiogram.types import CallbackQuery, InlineKeyboardButton, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from handlers.payments.yookassa_pay import process_custom_amount_input

from bot import bot
from config import (
    CONNECT_ANDROID,
    CONNECT_IOS,
    CONNECT_PHONE_BUTTON,
    DATABASE_URL,
    DOWNLOAD_ANDROID,
    DOWNLOAD_IOS,
    ENABLE_DELETE_KEY_BUTTON,
    ENABLE_UPDATE_SUBSCRIPTION_BUTTON,
    PUBLIC_LINK,
    RENEWAL_PLANS,
    TOTAL_GB,
    USE_COUNTRY_SELECTION,
    USE_NEW_PAYMENT_FLOW,
    TOGGLE_CLIENT,
)
from database import (
    check_server_name_by_cluster,
    create_temporary_data,
    delete_key,
    get_balance,
    get_key_by_server,
    get_key_details,
    get_keys,
    get_servers,
    update_balance,
    update_key_expiry,
)
from handlers.buttons.add_subscribe import (
    DOWNLOAD_ANDROID_BUTTON,
    DOWNLOAD_IOS_BUTTON,
    IMPORT_ANDROID,
    IMPORT_IOS,
    PC_BUTTON,
    TV_BUTTON,
)
from handlers.keys.key_utils import (
    delete_key_from_cluster,
    renew_key_in_cluster,
    update_subscription,
    toggle_client_on_cluster,
)
from handlers.payments.robokassa_pay import handle_custom_amount_input
from handlers.texts import (
    DISCOUNTS,
    KEY_NOT_FOUND_MSG,
    PLAN_SELECTION_MSG,
    SUBSCRIPTION_DESCRIPTION,
    SUCCESS_RENEWAL_MSG,
    key_message,
    NO_SUBSCRIPTIONS_MSG,
    FROZEN_SUBSCRIPTION_MSG,
    UNFREEZE_SUBSCRIPTION_CONFIRM_MSG,
    SUBSCRIPTION_UNFROZEN_MSG,
    FREEZE_SUBSCRIPTION_CONFIRM_MSG,
    SUBSCRIPTION_FROZEN_MSG,
    DELETE_KEY_CONFIRM_MSG,
    KEY_DELETED_MSG_SIMPLE,
    INSUFFICIENT_FUNDS_RENEWAL_MSG,
)
from handlers.utils import edit_or_send_message, handle_error
from logger import logger

locale.setlocale(locale.LC_TIME, "ru_RU.UTF-8")

router = Router()


@router.callback_query(F.data == "view_keys")
@router.message(F.text == "/subs")
async def process_callback_or_message_view_keys(callback_query_or_message: Message | CallbackQuery, session: Any):
    if isinstance(callback_query_or_message, CallbackQuery):
        target_message = callback_query_or_message.message
    else:
        target_message = callback_query_or_message

    try:
        records = await get_keys(target_message.chat.id, session)
        inline_keyboard, response_message = build_keys_response(records)
        image_path = os.path.join("img", "pic_keys.jpg")

        await edit_or_send_message(
            target_message=target_message, text=response_message, reply_markup=inline_keyboard, media_path=image_path
        )
    except Exception as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π: {e}"
        await target_message.answer(text=error_message)


def build_keys_response(records):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    builder = InlineKeyboardBuilder()
    moscow_tz = pytz.timezone("Europe/Moscow")

    if records:
        response_message = "<b>üîë –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫:</b>\n\n<blockquote>"
        for record in records:
            key_name = record["email"]
            expiry_time = record.get("expiry_time")

            if expiry_time:
                expiry_date_full = datetime.fromtimestamp(expiry_time / 1000, tz=moscow_tz)
                formatted_date_full = expiry_date_full.strftime("–¥–æ %d.%m.%y, %H:%M")
                formatted_date_short = expiry_date_full.strftime("–¥–æ %d.%m.%y")
            else:
                formatted_date_full = "–±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"
                formatted_date_short = "–±–µ–∑ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"

            button_text = f"üîë{key_name} ({formatted_date_short})"
            builder.row(InlineKeyboardButton(text=button_text, callback_data=f"view_key|{key_name}"))

            response_message += f"‚Ä¢ <b>{key_name}</b> ({formatted_date_full})\n"

        response_message += "</blockquote>\n"
    else:
        response_message = NO_SUBSCRIPTIONS_MSG

    builder.row(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="create_key"))
    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    inline_keyboard = builder.as_markup()
    return inline_keyboard, response_message


@router.callback_query(F.data.startswith("view_key|"))
async def process_callback_view_key(callback_query: CallbackQuery, session: Any):
    tg_id = callback_query.message.chat.id
    key_name = callback_query.data.split("|")[1]
    try:
        record = await get_key_details(key_name, session)
        if record:
            is_frozen = record["is_frozen"]

            if is_frozen:
                response_message = FROZEN_SUBSCRIPTION_MSG

                builder = InlineKeyboardBuilder()
                builder.row(
                    InlineKeyboardButton(
                        text="üü¢ –†–∞–∑–º–æ—Ä–æ–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data=f"unfreeze_subscription|{key_name}",
                    )
                )
                builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_keys"))
                builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

                keyboard = builder.as_markup()
                image_path = os.path.join("img", "pic_view.jpg")

                if not os.path.isfile(image_path):
                    await callback_query.message.answer("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                await edit_or_send_message(
                    target_message=callback_query.message,
                    text=response_message,
                    reply_markup=keyboard,
                    media_path=image_path,
                )

            else:
                key = record["key"]
                expiry_time = record["expiry_time"]
                server_name = record["server_id"]
                country = server_name
                expiry_date = datetime.utcfromtimestamp(expiry_time / 1000)
                current_date = datetime.utcnow()
                time_left = expiry_date - current_date

                if time_left.total_seconds() <= 0:
                    days_left_message = "<b>üïí –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏:</b>\nüî¥ –ò—Å—Ç–µ–∫–ª–∞\n–û—Å—Ç–∞–ª–æ—Å—å —á–∞—Å–æ–≤: 0\n–û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç: 0"
                else:
                    total_seconds = int(time_left.total_seconds())
                    days = total_seconds // 86400
                    hours = (total_seconds % 86400) // 3600
                    minutes = (total_seconds % 3600) // 60
                    days_left_message = f"–û—Å—Ç–∞–ª–æ—Å—å: <b>{days}</b> –¥–Ω–µ–π, <b>{hours}</b> —á–∞—Å–æ–≤, <b>{minutes}</b> –º–∏–Ω—É—Ç"

                formatted_expiry_date = expiry_date.strftime("%d %B %Y –≥–æ–¥–∞")
                response_message = key_message(
                    key,
                    formatted_expiry_date,
                    days_left_message,
                    server_name,
                    country if USE_COUNTRY_SELECTION else None,
                )

                builder = InlineKeyboardBuilder()

                if not key.startswith(PUBLIC_LINK) or ENABLE_UPDATE_SUBSCRIPTION_BUTTON:
                    builder.row(
                        InlineKeyboardButton(
                            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data=f"update_subscription|{key_name}",
                        )
                    )

                if CONNECT_PHONE_BUTTON:
                    builder.row(
                        InlineKeyboardButton(
                            text="üì± –ü–æ–¥–∫–ª—é—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω",
                            callback_data=f"connect_phone|{key_name}",
                        )
                    )
                else:
                    builder.row(
                        InlineKeyboardButton(text=DOWNLOAD_IOS_BUTTON, url=DOWNLOAD_IOS),
                        InlineKeyboardButton(text=DOWNLOAD_ANDROID_BUTTON, url=DOWNLOAD_ANDROID),
                    )
                    builder.row(
                        InlineKeyboardButton(text=IMPORT_IOS, url=f"{CONNECT_IOS}{key}"),
                        InlineKeyboardButton(text=IMPORT_ANDROID, url=f"{CONNECT_ANDROID}{key}"),
                    )

                builder.row(
                    InlineKeyboardButton(text=PC_BUTTON, callback_data=f"connect_pc|{key_name}"),
                    InlineKeyboardButton(text=TV_BUTTON, callback_data=f"connect_tv|{key_name}"),
                )

                if ENABLE_DELETE_KEY_BUTTON:
                    builder.row(
                        InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å", callback_data=f"renew_key|{key_name}"),
                        InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_key|{key_name}"),
                    )
                else:
                    builder.row(
                        InlineKeyboardButton(text="‚è≥ –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"renew_key|{key_name}")
                    )

                if USE_COUNTRY_SELECTION:
                    builder.row(
                        InlineKeyboardButton(text="üåç –°–º–µ–Ω–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", callback_data=f"change_location|{key_name}")
                    )

                if TOGGLE_CLIENT:
                    builder.row(
                        InlineKeyboardButton(
                            text="üõë –ó–∞–º–æ—Ä–æ–∑–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                            callback_data=f"freeze_subscription|{key_name}",
                        )
                    )

                builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_keys"))
                builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

                keyboard = builder.as_markup()
                image_path = os.path.join("img", "pic_view.jpg")

                if not os.path.isfile(image_path):
                    await callback_query.message.answer("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    return

                await edit_or_send_message(
                    target_message=callback_query.message,
                    text=response_message,
                    reply_markup=keyboard,
                    media_path=image_path,
                )
        else:
            await callback_query.message.answer(text="<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.</b>")
    except Exception as e:
        await handle_error(
            tg_id,
            callback_query,
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª—é—á–µ: {e}",
        )


@router.callback_query(F.data.startswith("unfreeze_subscription|"))
async def process_callback_unfreeze_subscription(callback_query: CallbackQuery, session: Any):
    key_name = callback_query.data.split("|")[1]
    confirm_text = UNFREEZE_SUBSCRIPTION_CONFIRM_MSG

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"unfreeze_subscription_confirm|{key_name}",
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"view_key|{key_name}",
        ),
    )

    await edit_or_send_message(
        target_message=callback_query.message,
        text=confirm_text,
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("unfreeze_subscription_confirm|"))
async def process_callback_unfreeze_subscription_confirm(callback_query: CallbackQuery, session: Any):
    """
    –†–∞–∑–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç (–≤–∫–ª—é—á–∞–µ—Ç) –ø–æ–¥–ø–∏—Å–∫—É.
    """
    tg_id = callback_query.message.chat.id
    key_name = callback_query.data.split("|")[1]

    try:
        record = await get_key_details(key_name, session)
        if not record:
            await callback_query.message.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        email = record["email"]
        client_id = record["client_id"]
        cluster_id = record["server_id"]

        result = await toggle_client_on_cluster(cluster_id, email, client_id, enable=True)
        if result["status"] == "success":
            now_ms = int(time.time() * 1000)
            leftover = record["expiry_time"]
            if leftover < 0:
                leftover = 0

            new_expiry_time = now_ms + leftover
            await session.execute(
                """
                UPDATE keys
                SET expiry_time = $1,
                    is_frozen = FALSE
                WHERE tg_id = $2
                  AND client_id = $3
                """,
                new_expiry_time,
                record["tg_id"],
                client_id,
            )

            await renew_key_in_cluster(
                cluster_id=cluster_id,
                email=email,
                client_id=client_id,
                new_expiry_time=new_expiry_time,
                total_gb=TOTAL_GB,
            )
            text_ok = SUBSCRIPTION_UNFROZEN_MSG
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key|{key_name}"))
            await edit_or_send_message(
                target_message=callback_query.message,
                text=text_ok,
                reply_markup=builder.as_markup(),
            )
        else:
            text_error = (
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n–î–µ—Ç–∞–ª–∏: {result.get('error') or result.get('results')}"
            )
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key|{key_name}"))
            await edit_or_send_message(
                target_message=callback_query.message,
                text=text_error,
                reply_markup=builder.as_markup(),
            )

    except Exception as e:
        await handle_error(tg_id, callback_query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


@router.callback_query(F.data.startswith("freeze_subscription|"))
async def process_callback_freeze_subscription(callback_query: CallbackQuery, session: Any):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–º–æ—Ä–æ–∑–∫–∏ (–æ—Ç–∫–ª—é—á–µ–Ω–∏—è) –ø–æ–¥–ø–∏—Å–∫–∏.
    """
    tg_id = callback_query.message.chat.id
    key_name = callback_query.data.split("|")[1]

    confirm_text = FREEZE_SUBSCRIPTION_CONFIRM_MSG

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"freeze_subscription_confirm|{key_name}",
        ),
        InlineKeyboardButton(
            text="‚ùå –û—Ç–º–µ–Ω–∞",
            callback_data=f"view_key|{key_name}",
        ),
    )

    await edit_or_send_message(
        target_message=callback_query.message,
        text=confirm_text,
        reply_markup=builder.as_markup(),
    )


@router.callback_query(F.data.startswith("freeze_subscription_confirm|"))
async def process_callback_freeze_subscription_confirm(callback_query: CallbackQuery, session: Any):
    """
    –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ—Ç (–æ—Ç–∫–ª—é—á–∞–µ—Ç) –ø–æ–¥–ø–∏—Å–∫—É.
    """
    tg_id = callback_query.message.chat.id
    key_name = callback_query.data.split("|")[1]

    try:
        record = await get_key_details(key_name, session)
        if not record:
            await callback_query.message.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        email = record["email"]
        client_id = record["client_id"]
        cluster_id = record["server_id"]

        result = await toggle_client_on_cluster(cluster_id, email, client_id, enable=False)

        if result["status"] == "success":
            now_ms = int(time.time() * 1000)
            time_left = record["expiry_time"] - now_ms
            if time_left < 0:
                time_left = 0

            update_result = await session.execute(
                """
                UPDATE keys
                SET expiry_time = $1,
                    is_frozen = TRUE
                WHERE tg_id = $2
                  AND client_id = $3
                """,
                time_left,
                record["tg_id"],
                client_id,
            )

            text_ok = SUBSCRIPTION_FROZEN_MSG
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key|{key_name}"))
            await edit_or_send_message(
                target_message=callback_query.message,
                text=text_ok,
                reply_markup=builder.as_markup(),
            )
        else:
            text_error = (
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.\n–î–µ—Ç–∞–ª–∏: {result.get('error') or result.get('results')}"
            )
            builder = InlineKeyboardBuilder()
            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key|{key_name}"))
            await edit_or_send_message(
                target_message=callback_query.message,
                text=text_error,
                reply_markup=builder.as_markup(),
            )

    except Exception as e:
        await handle_error(tg_id, callback_query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


@router.callback_query(F.data.startswith("connect_phone|"))
async def process_callback_connect_phone(callback_query: CallbackQuery):
    email = callback_query.data.split("|")[1]

    conn = None
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        key_data = await conn.fetchrow(
            """
            SELECT key FROM keys WHERE email = $1
            """,
            email,
        )
        if not key_data:
            await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        key_link = key_data["key"]

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ –¥–ª—è {email}: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    finally:
        if conn:
            await conn.close()

    description = SUBSCRIPTION_DESCRIPTION.format(key_link=key_link)

    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(text=DOWNLOAD_IOS_BUTTON, url=DOWNLOAD_IOS),
        InlineKeyboardButton(text=DOWNLOAD_ANDROID_BUTTON, url=DOWNLOAD_ANDROID),
    )
    builder.row(
        InlineKeyboardButton(text=IMPORT_IOS, url=f"{CONNECT_IOS}{key_link}"),
        InlineKeyboardButton(text=IMPORT_ANDROID, url=f"{CONNECT_ANDROID}{key_link}"),
    )
    builder.row(InlineKeyboardButton(text="üìñ –†—É—á–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞", callback_data="instructions"))
    builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"view_key|{email}"))

    await edit_or_send_message(
        target_message=callback_query.message, text=description, reply_markup=builder.as_markup(), media_path=None
    )


@router.callback_query(F.data.startswith("update_subscription|"))
async def process_callback_update_subscription(callback_query: CallbackQuery, session: Any):
    tg_id = callback_query.message.chat.id
    email = callback_query.data.split("|")[1]

    try:
        await update_subscription(tg_id, email, session)
        await process_callback_view_key(callback_query, session)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {email} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {e}")
        await handle_error(tg_id, callback_query, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")


@router.callback_query(F.data.startswith("delete_key|"))
async def process_callback_delete_key(callback_query: CallbackQuery):
    client_id = callback_query.data.split("|")[1]
    try:
        confirmation_keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å",
                        callback_data=f"confirm_delete|{client_id}",
                    )
                ],
                [types.InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="view_keys")],
            ]
        )

        if callback_query.message.caption:
            await callback_query.message.edit_caption(
                caption=DELETE_KEY_CONFIRM_MSG, reply_markup=confirmation_keyboard
            )
        else:
            await callback_query.message.edit_text(text=DELETE_KEY_CONFIRM_MSG, reply_markup=confirmation_keyboard)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ {client_id}: {e}")


@router.callback_query(F.data.startswith("confirm_delete|"))
async def process_callback_confirm_delete(callback_query: CallbackQuery, session: Any):
    email = callback_query.data.split("|")[1]
    try:
        record = await get_key_details(email, session)
        if record:
            client_id = record["client_id"]
            response_message = KEY_DELETED_MSG_SIMPLE
            back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="view_keys")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])

            await delete_key(client_id, session)

            await edit_or_send_message(
                target_message=callback_query.message, text=response_message, reply_markup=keyboard, media_path=None
            )

            servers = await get_servers(session)

            async def delete_key_from_servers():
                try:  # lol
                    tasks = []
                    for cluster_id, _cluster in servers.items():
                        tasks.append(delete_key_from_cluster(cluster_id, email, client_id))
                    await asyncio.gather(*tasks, return_exceptions=True)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {client_id}: {e}")

            asyncio.create_task(delete_key_from_servers())

            await delete_key(client_id, session)
        else:
            response_message = "–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω."
            back_button = types.InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="view_keys")
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[[back_button]])
            await edit_or_send_message(
                target_message=callback_query.message, text=response_message, reply_markup=keyboard, media_path=None
            )
    except Exception as e:
        logger.error(e)


@router.callback_query(F.data.startswith("renew_key|"))
async def process_callback_renew_key(callback_query: CallbackQuery, session: Any):
    tg_id = callback_query.message.chat.id
    key_name = callback_query.data.split("|")[1]
    try:
        record = await get_key_details(key_name, session)
        if record:
            client_id = record["client_id"]
            expiry_time = record["expiry_time"]

            builder = InlineKeyboardBuilder()

            for plan_id, plan_details in RENEWAL_PLANS.items():
                months = plan_details["months"]
                price = plan_details["price"]
                discount = DISCOUNTS.get(plan_id, 0)
                button_text = f"üìÖ {months} –º–µ—Å—è—Ü{'–∞' if months > 1 else ''} ({price} —Ä—É–±.)" + (
                    f" {discount}% —Å–∫–∏–¥–∫–∞" if discount > 0 else ""
                )
                builder.row(
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"renew_plan|{months}|{client_id}",
                    )
                )

            builder.row(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="view_keys"))

            balance = await get_balance(tg_id)

            response_message = PLAN_SELECTION_MSG.format(
                balance=balance,
                expiry_date=datetime.utcfromtimestamp(expiry_time / 1000).strftime("%Y-%m-%d %H:%M:%S"),
            )

            await edit_or_send_message(
                target_message=callback_query.message,
                text=response_message,
                reply_markup=builder.as_markup(),
                media_path=None,
            )
        else:
            await callback_query.message.answer("<b>–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
    except Exception as e:
        logger.error(e)


@router.callback_query(F.data.startswith("renew_plan|"))
async def process_callback_renew_plan(callback_query: CallbackQuery, session: Any):
    tg_id = callback_query.message.chat.id
    plan, client_id = callback_query.data.split("|")[1], callback_query.data.split("|")[2]
    days_to_extend = 30 * int(plan)

    gb_multiplier = {"1": 1, "3": 3, "6": 6, "12": 12}
    total_gb = TOTAL_GB * gb_multiplier.get(plan, 1) if TOTAL_GB > 0 else 0

    try:
        record = await get_key_by_server(tg_id, client_id, session)

        if record:
            email = record["email"]
            expiry_time = record["expiry_time"]
            current_time = datetime.utcnow().timestamp() * 1000

            if expiry_time <= current_time:
                new_expiry_time = int(current_time + timedelta(days=days_to_extend).total_seconds() * 1000)
            else:
                new_expiry_time = int(expiry_time + timedelta(days=days_to_extend).total_seconds() * 1000)

            cost = RENEWAL_PLANS[plan]["price"]
            balance = await get_balance(tg_id)

            if balance < cost:
                required_amount = cost - balance

                logger.info(
                    f"[RENEW] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {required_amount}‚ÇΩ. –ó–∞–ø—É—Å–∫ –¥–æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ {USE_NEW_PAYMENT_FLOW}"
                )

                await create_temporary_data(
                    session,
                    tg_id,
                    "waiting_for_renewal_payment",
                    {
                        "plan": plan,
                        "client_id": client_id,
                        "cost": cost,
                        "required_amount": required_amount,
                        "new_expiry_time": new_expiry_time,
                        "total_gb": total_gb,
                        "email": email,
                    },
                )

                if USE_NEW_PAYMENT_FLOW == "YOOKASSA":
                    logger.info(f"[RENEW] –ó–∞–ø—É—Å–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –Æ–∫–∞—Å—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
                    await process_custom_amount_input(callback_query, session)
                elif USE_NEW_PAYMENT_FLOW == "ROBOKASSA":
                    logger.info(f"[RENEW] –ó–∞–ø—É—Å–∫ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ –†–æ–±–æ–∫–∞—Å—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
                    await handle_custom_amount_input(callback_query, session)
                else:
                    logger.info(f"[RENEW] –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –¥–æ–ø–ª–∞—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}")
                    builder = InlineKeyboardBuilder()
                    builder.row(InlineKeyboardButton(text="üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data="pay"))
                    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

                    await edit_or_send_message(
                        target_message=callback_query.message,
                        text=INSUFFICIENT_FUNDS_RENEWAL_MSG.format(required_amount=required_amount),
                        reply_markup=builder.as_markup(),
                        media_path=None,
                    )
                return

            logger.info(f"[RENEW] –°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}")
            await complete_key_renewal(tg_id, client_id, email, new_expiry_time, total_gb, cost, callback_query, plan)

        else:
            await callback_query.message.answer(KEY_NOT_FOUND_MSG)
            logger.error(f"[RENEW] –ö–ª—é—á —Å client_id={client_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"[RENEW] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {e}")


async def complete_key_renewal(tg_id, client_id, email, new_expiry_time, total_gb, cost, callback_query, plan):
    logger.info(
        f"[RENEW] –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: "
        f"tg_id={tg_id}, client_id={client_id}, email={email}, "
        f"new_expiry_time={new_expiry_time}, total_gb={total_gb}, cost={cost}, "
        f"callback_query={'–µ—Å—Ç—å' if callback_query else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}, plan={plan}"
    )

    response_message = SUCCESS_RENEWAL_MSG.format(months=plan)

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="profile"))

    if callback_query:
        try:
            await edit_or_send_message(
                target_message=callback_query.message,
                text=response_message,
                reply_markup=builder.as_markup(),
                media_path=None,
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ complete_key_renewal: {e}")
            await callback_query.message.answer(response_message, reply_markup=builder.as_markup())
    else:
        await bot.send_message(tg_id, response_message, reply_markup=builder.as_markup())

    conn = await asyncpg.connect(DATABASE_URL)

    logger.info(f"[RENEW] –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–ª—é—á–µ –¥–ª—è email: {email}")
    key_info = await get_key_details(email, conn)
    if not key_info:
        logger.error(f"[RENEW] –ö–ª—é—á —Å client_id {client_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await conn.close()
        return

    server_id = key_info["server_id"]

    if USE_COUNTRY_SELECTION:
        logger.info(f"[RENEW] USE_COUNTRY_SELECTION –≤–∫–ª—é—á—ë–Ω. –ü—Ä–æ–≤–µ—Ä—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ {server_id}")
        cluster_info = await check_server_name_by_cluster(server_id, conn)
        if not cluster_info:
            logger.error(f"[RENEW] –°–µ—Ä–≤–µ—Ä {server_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ servers.")
            await conn.close()
            return
        cluster_id = cluster_info["cluster_name"]
        logger.info(f"[RENEW] –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∞: {cluster_info}. –ò—Å–ø–æ–ª—å–∑—É—é cluster_id: {cluster_id}")
    else:
        cluster_id = server_id
        logger.info(f"[RENEW] USE_COUNTRY_SELECTION –≤—ã–∫–ª—é—á–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É—é server_id –≤ –∫–∞—á–µ—Å—Ç–≤–µ cluster_id: {cluster_id}")

    logger.info(f"[RENEW] –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –Ω–∞ {plan} –º–µ—Å. –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_id}.")

    async def renew_key_on_cluster():
        logger.info(
            f"[RENEW] –ó–∞–ø—É—Å–∫ renew_key_on_cluster —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: "
            f"cluster_id={cluster_id}, email={email}, client_id={client_id}, "
            f"new_expiry_time={new_expiry_time}, total_gb={total_gb}"
        )
        await renew_key_in_cluster(cluster_id, email, client_id, new_expiry_time, total_gb)
        logger.info("[RENEW] –ü—Ä–æ–¥–ª–µ–Ω–∏–µ –∫–ª—é—á–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û–±–Ω–æ–≤–ª—è—é —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        await update_key_expiry(client_id, new_expiry_time, conn)
        logger.info("[RENEW] –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∫–ª—é—á–∞ –æ–±–Ω–æ–≤–ª—ë–Ω. –û–±–Ω–æ–≤–ª—è—é –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        await update_balance(tg_id, -cost, conn)
        logger.info(f"[RENEW] –ö–ª—é—á {client_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª—ë–Ω –Ω–∞ {plan} –º–µ—Å. –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}.")

    logger.info("[RENEW] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ.")
    await renew_key_on_cluster()

    logger.info("[RENEW] –ü—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–ª–µ–Ω–∏—è –∫–ª—é—á–∞ –∑–∞–≤–µ—Ä—à—ë–Ω. –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.")
    await conn.close()
