import asyncio
from typing import Any

import asyncpg
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from py3xui import AsyncApi

from backup import create_backup_and_send_to_admins
from config import ADMIN_PASSWORD, ADMIN_USERNAME, DATABASE_URL
from database import check_unique_server_name, get_servers
from filters.admin import IsAdminFilter
from handlers.keys.key_utils import create_key_on_cluster, create_client_on_server
from logger import logger
from .keyboard import (
    build_clusters_editor_kb,
    build_manage_cluster_kb,
    AdminClusterCallback,
    build_sync_cluster_kb,
)
from ..panel.keyboard import AdminPanelCallback, build_admin_back_kb

router = Router()


class AdminClusterStates(StatesGroup):
    waiting_for_cluster_name = State()
    waiting_for_api_url = State()
    waiting_for_inbound_id = State()
    waiting_for_server_name = State()
    waiting_for_subscription_url = State()


@router.callback_query(
    AdminPanelCallback.filter(F.action == "clusters"),
    IsAdminFilter(),
)
async def handle_servers(callback_query: CallbackQuery):
    servers = await get_servers()

    text = (
        "<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–∞–º–∏</b>\n\n"
        "<i>üìå –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä.</i>\n\n"
        "<i>üåê <b>–ö–ª–∞—Å—Ç–µ—Ä—ã</b> ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤, –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞.</i>\n"
        "üí° –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞–≤–∞—Ç—å –ø–æ 1 —Å–µ—Ä–≤–µ—Ä—É, —Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –≤—Å–µ–≥–æ 1 —Å–µ—Ä–≤–µ—Ä –≤ –∫–ª–∞—Å—Ç–µ—Ä.\n\n"
        "<i>‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ö–ª–∞—Å—Ç–µ—Ä—ã —É–¥–∞–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –µ—Å–ª–∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –≤–Ω—É—Ç—Ä–∏ –Ω–∏—Ö.</i>\n\n"
    )

    await callback_query.message.edit_text(
        text=text,
        reply_markup=build_clusters_editor_kb(servers),
    )


@router.callback_query(AdminClusterCallback.filter(F.action == "add"), IsAdminFilter())
async def handle_clusters_add(callback_query: CallbackQuery, state: FSMContext):
    text = (
        "üîß <b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞:</b>\n\n"
        "<b>–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º!</b>\n"
        "<b>–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤!</b>\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>cluster1</code> –∏–ª–∏ <code>us_east_1</code>"
    )

    await callback_query.message.edit_text(text=text, reply_markup=build_admin_back_kb("clusters"))

    await state.set_state(AdminClusterStates.waiting_for_cluster_name)


@router.message(AdminClusterStates.waiting_for_cluster_name, IsAdminFilter())
async def handle_cluster_name_input(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(
            text="‚ùå –ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=build_admin_back_kb("clusters")
        )
        return

    if len(message.text) > 12:
        await message.answer(
            text="‚ùå –ò–º—è –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=build_admin_back_kb("clusters"),
        )
        return

    cluster_name = message.text.strip()
    await state.update_data(cluster_name=cluster_name)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}:</b>\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏ –Ω–æ–º–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞ –≤ –∏–º–µ–Ω–∏.\n\n"
        "<i>–ü—Ä–∏–º–µ—Ä:</i> <code>de1</code>, <code>fra1</code>, <code>fi2</code>"
    )

    await message.answer(
        text=text,
        reply_markup=build_admin_back_kb("clusters"),
    )

    await state.set_state(AdminClusterStates.waiting_for_server_name)


@router.message(AdminClusterStates.waiting_for_server_name, IsAdminFilter())
async def handle_server_name_input(message: Message, state: FSMContext, session: Any):
    if not message.text:
        await message.answer(
            text="‚ùå –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=build_admin_back_kb("clusters")
        )
        return

    server_name = message.text.strip()

    if len(server_name) > 12:
        await message.answer(
            text="‚ùå –ò–º—è —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 12 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=build_admin_back_kb("clusters"),
        )
        return

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")

    if not await check_unique_server_name(server_name, session, cluster_name):
        await message.answer(
            text="‚ùå –°–µ—Ä–≤–µ—Ä —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.",
            reply_markup=build_admin_back_kb("clusters"),
        )
        return

    await state.update_data(server_name=server_name)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ API URL –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "–°—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ –±—Ä–∞—É–∑–µ—Ä–∞, –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ 3X-UI.\n\n"
        "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç API URL:\n"
        "<code>https://your_domain:port/panel_path/</code>"
    )

    await message.answer(
        text=text,
        reply_markup=build_admin_back_kb("clusters"),
    )

    await state.set_state(AdminClusterStates.waiting_for_api_url)


@router.message(AdminClusterStates.waiting_for_api_url, IsAdminFilter())
async def handle_api_url_input(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().startswith("https://"):
        await message.answer(
            text="‚ùå API URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>https://</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=build_admin_back_kb("clusters"),
        )
        return

    api_url = message.text.strip().rstrip("/")

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    await state.update_data(api_url=api_url)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ subscription_url –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "–°—Å—ã–ª–∫—É –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª–∏ 3X-UI, –≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ.\n\n"
        "‚ÑπÔ∏è –§–æ—Ä–º–∞—Ç Subscription URL:\n"
        "<code>https://your_domain:port_sub/sub_path/</code>"
    )

    await message.answer(
        text=text,
        reply_markup=build_admin_back_kb("clusters"),
    )

    await state.set_state(AdminClusterStates.waiting_for_subscription_url)


@router.message(AdminClusterStates.waiting_for_subscription_url, IsAdminFilter())
async def handle_subscription_url_input(message: Message, state: FSMContext):
    if not message.text or not message.text.strip().startswith("https://"):
        await message.answer(
            text="‚ùå subscription_url –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å <code>https://</code>. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=build_admin_back_kb("clusters"),
        )
        return

    subscription_url = message.text.strip().rstrip("/")

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    await state.update_data(subscription_url=subscription_url)

    text = (
        f"<b>–í–≤–µ–¥–∏—Ç–µ inbound_id –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name} –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}:</b>\n\n"
        "–≠—Ç–æ –Ω–æ–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è vless –≤ –≤–∞—à–µ–π –ø–∞–Ω–µ–ª–∏ 3x-ui. –û–±—ã—á–Ω–æ —ç—Ç–æ <b>1</b> –ø—Ä–∏ —á–∏—Å—Ç–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –ø–æ –≥–∞–π–¥—É.\n\n"
    )

    await message.answer(
        text=text,
        reply_markup=build_admin_back_kb("clusters"),
    )
    await state.set_state(AdminClusterStates.waiting_for_inbound_id)


@router.message(AdminClusterStates.waiting_for_inbound_id, IsAdminFilter())
async def handle_inbound_id_input(message: Message, state: FSMContext):
    inbound_id = message.text.strip()

    if not inbound_id.isdigit():
        await message.answer(
            text="‚ùå inbound_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=build_admin_back_kb("clusters"),
        )
        return

    user_data = await state.get_data()
    cluster_name = user_data.get("cluster_name")
    server_name = user_data.get("server_name")
    api_url = user_data.get("api_url")
    subscription_url = user_data.get("subscription_url")

    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        """
        INSERT INTO servers (cluster_name, server_name, api_url, subscription_url, inbound_id) 
        VALUES ($1, $2, $3, $4, $5)
        """,
        cluster_name,
        server_name,
        api_url,
        subscription_url,
        inbound_id,
    )
    await conn.close()

    await message.answer(
        text=f"‚úÖ –ö–ª–∞—Å—Ç–µ—Ä {cluster_name} –∏ —Å–µ—Ä–≤–µ—Ä {server_name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!",
        reply_markup=build_admin_back_kb("clusters"),
    )

    await state.clear()


@router.callback_query(AdminClusterCallback.filter(F.action == "manage"), IsAdminFilter())
async def handle_clusters_manage(
    callback_query: types.CallbackQuery, callback_data: AdminClusterCallback, session: Any
):
    cluster_name = callback_data.data

    servers = await get_servers(session)
    cluster_servers = servers.get(cluster_name, [])

    await callback_query.message.edit_text(
        text=f"<b>üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–º {cluster_name}</b>",
        reply_markup=build_manage_cluster_kb(cluster_servers, cluster_name),
    )


@router.callback_query(AdminClusterCallback.filter(F.action == "availability"), IsAdminFilter())
async def handle_cluster_availability(
    callback_query: types.CallbackQuery, callback_data: AdminClusterCallback, session: Any
):
    cluster_name = callback_data.data

    servers = await get_servers(session)
    cluster_servers = servers.get(cluster_name, [])

    if not cluster_servers:
        await callback_query.message.edit_text(text=f"–ö–ª–∞—Å—Ç–µ—Ä '{cluster_name}' –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–µ—Ä–≤–µ—Ä–æ–≤.")
        return

    text = (
        f"üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}.\n\n"
        "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 1 –º–∏–Ω—É—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ..."
    )

    await callback_query.message.edit_text(text=text)

    total_online_users = 0
    result_text = f"<b>üñ•Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–æ–≤</b>\n\n‚öôÔ∏è –ö–ª–∞—Å—Ç–µ—Ä: <b>{cluster_name}</b>\n\n"

    for server in cluster_servers:
        xui = AsyncApi(server["api_url"], username=ADMIN_USERNAME, password=ADMIN_PASSWORD, logger=logger)

        try:
            await xui.login()
            online_users = len(await xui.client.online())
            total_online_users += online_users
            result_text += f"üåç <b>{server['server_name']}</b> - –æ–Ω–ª–∞–π–Ω: {online_users}\n"
        except Exception as e:
            result_text += f"‚ùå <b>{server['server_name']}</b> - –æ—à–∏–±–∫–∞: {e}\n"

    result_text += f"\nüë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–Ω–ª–∞–π–Ω: {total_online_users}"

    await callback_query.message.edit_text(text=result_text, reply_markup=build_admin_back_kb("clusters"))


@router.callback_query(AdminClusterCallback.filter(F.action == "backup"), IsAdminFilter())
async def handle_clusters_backup(
    callback_query: types.CallbackQuery, callback_data: AdminClusterCallback, session: Any
):
    cluster_name = callback_data.data

    servers = await get_servers(session)
    cluster_servers = servers.get(cluster_name, [])

    for server in cluster_servers:
        xui = AsyncApi(
            server["api_url"],
            username=ADMIN_USERNAME,
            password=ADMIN_PASSWORD,
            logger=logger,
        )
        await create_backup_and_send_to_admins(xui)

    text = (
        f"<b>–ë—ç–∫–∞–ø –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º!</b>\n\n"
        f"üîî <i>–ë—ç–∫–∞–ø—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –±–æ—Ç—ã –ø–∞–Ω–µ–ª–µ–π.</i>"
    )

    await callback_query.message.edit_text(
        text=text,
        reply_markup=build_admin_back_kb("clusters"),
    )


@router.callback_query(AdminClusterCallback.filter(F.action == "sync"), IsAdminFilter())
async def handle_sync(callback_query: types.CallbackQuery, callback_data: AdminClusterCallback, session: Any):
    cluster_name = callback_data.data

    servers = await get_servers(session)
    cluster_servers = servers.get(cluster_name, [])

    await callback_query.message.answer(
        text=f"<b>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}</b>",
        reply_markup=build_sync_cluster_kb(cluster_servers, cluster_name),
    )


@router.callback_query(AdminClusterCallback.filter(F.action == "sync-server"), IsAdminFilter())
async def handle_sync_server(callback_query: types.CallbackQuery, callback_data: AdminClusterCallback, session: Any):
    server_name = callback_data.data

    try:
        query_keys = """
                SELECT s.*, k.tg_id, k.client_id, k.email, k.expiry_time
                FROM servers s
                JOIN keys k ON s.cluster_name = k.server_id
                WHERE s.server_name = $1;
            """
        keys_to_sync = await session.fetch(query_keys, server_name)

        if not keys_to_sync:
            await callback_query.message.answer(
                text=f"‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ—Ä–≤–µ—Ä–µ {server_name}.",
                reply_markup=build_admin_back_kb("clusters"),
            )
            return

        text = f"<b>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}</b>\n\nüîë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: <b>{len(keys_to_sync)}</b>"

        await callback_query.message.answer(
            text=text,
        )

        semaphore = asyncio.Semaphore(2)
        for key in keys_to_sync:
            try:
                await create_client_on_server(
                    {
                        "api_url": key["api_url"],
                        "inbound_id": key["inbound_id"],
                        "server_name": key["server_name"],
                    },
                    key["tg_id"],
                    key["client_id"],
                    key["email"],
                    key["expiry_time"],
                    semaphore,
                )
                await asyncio.sleep(0.6)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key['client_id']} –≤ —Å–µ—Ä–≤–µ—Ä {server_name}: {e}")

        await callback_query.message.answer(
            text=f"‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}",
            reply_markup=build_admin_back_kb("clusters"),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_name}: {e}")
        await callback_query.message.answer(
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", reply_markup=build_admin_back_kb("clusters")
        )


@router.callback_query(AdminClusterCallback.filter(F.action == "sync-cluster"), IsAdminFilter())
async def handle_sync_cluster(callback_query: types.CallbackQuery, callback_data: AdminClusterCallback, session: Any):
    cluster_name = callback_data.data

    try:
        query_keys = """
                SELECT tg_id, client_id, email, expiry_time
                FROM keys
                WHERE server_id = $1
            """
        keys_to_sync = await session.fetch(query_keys, cluster_name)

        if not keys_to_sync:
            await callback_query.message.answer(
                text=f"‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}.",
                reply_markup=build_admin_back_kb("clusters"),
            )
            return

        text = f"<b>üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}</b>\n\nüîë –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π: <b>{len(keys_to_sync)}</b>"

        await callback_query.message.answer(
            text=text,
        )

        for key in keys_to_sync:
            try:
                await create_key_on_cluster(
                    cluster_name,
                    key["tg_id"],
                    key["client_id"],
                    key["email"],
                    key["expiry_time"],
                )
                await asyncio.sleep(0.6)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ {key['client_id']} –≤ –∫–ª–∞—Å—Ç–µ—Ä {cluster_name}: {e}")

        await callback_query.message.answer(
            text=f"‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∞ {cluster_name}",
            reply_markup=build_admin_back_kb("clusters"),
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–ª—é—á–µ–π –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ {cluster_name}: {e}")
        await callback_query.message.answer(
            text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}", reply_markup=build_admin_back_kb("clusters")
        )
