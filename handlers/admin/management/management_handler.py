from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message
from asyncpg import Connection

from filters.admin import IsAdminFilter
from .keyboard import AdminPanelCallback, build_management_kb
from logger import logger
from ..panel.keyboard import build_admin_back_kb

router = Router()


class AdminManagementStates(StatesGroup):
    waiting_for_new_domain = State()


@router.callback_query(AdminPanelCallback.filter(F.action == "management"), IsAdminFilter())
async def handle_management(callback_query: CallbackQuery):
    await callback_query.message.edit_text(
        text="ü§ñ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º",
        reply_markup=build_management_kb(),
    )


@router.callback_query(AdminPanelCallback.filter(F.action == "change_domain"), IsAdminFilter())
async def request_new_domain(callback_query: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω."""
    await state.set_state(AdminManagementStates.waiting_for_new_domain)
    await callback_query.message.edit_text(
        text="üåê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –¥–æ–º–µ–Ω (–±–µ–∑ https://):\n–ü—Ä–∏–º–µ—Ä: pocomachodomen.ru",
    )


@router.message(AdminManagementStates.waiting_for_new_domain)
async def process_new_domain(message: Message, state: FSMContext, session: Connection):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–º–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ keys."""
    new_domain = message.text.strip()
    logger.info(f"[DomainChange] –ù–æ–≤—ã–π –¥–æ–º–µ–Ω, –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: '{new_domain}'")

    if not new_domain or " " in new_domain or not new_domain.replace(".", "").isalnum():
        logger.warning("[DomainChange] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω")
        await message.answer(
            "üö´ –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–æ–º–µ–Ω! –í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω –±–µ–∑ http:// –∏ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤.",
            reply_markup=build_admin_back_kb("admin"),
        )
        return

    new_domain_url = f"https://{new_domain}"
    logger.info(f"[DomainChange] –ù–æ–≤—ã–π –¥–æ–º–µ–Ω —Å –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º: '{new_domain_url}'")

    query = """
        UPDATE keys
        SET key = regexp_replace(key, '^https://[^/]+', $1::TEXT)
        WHERE key NOT LIKE $1 || '%'
    """
    try:
        await session.execute(query, new_domain_url)
        logger.info("[DomainChange] –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
    except Exception as e:
        logger.error(f"[DomainChange] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞: {e}", reply_markup=build_admin_back_kb("admin"))
        return

    try:
        sample = await session.fetchrow("SELECT key FROM keys LIMIT 1")
        logger.info(f"[DomainChange] –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏: {sample}")
    except Exception as e:
        logger.error(f"[DomainChange] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏: {e}")

    await message.answer(f"‚úÖ –î–æ–º–µ–Ω —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_domain}!", reply_markup=build_admin_back_kb("admin"))
    await state.clear()
